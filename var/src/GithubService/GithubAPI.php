<?php

//Auto-generated by ArtaxServiceBuilder - https://github.com/Danack/ArtaxServiceBuilder
//
//Do not be surprised if any changes to this file are over-written.
//
namespace GithubService;

interface GithubAPI
{

    /**
     * getAuthorizations
     *
     * @param Authorization mixed The oauth2 bearer token
     */
    public function getAuthorizations($Authorization);

    /**
     * accessToken
     *
     * @param client_id mixed string Required. The client ID you received from GitHub
     * when you registered.
     * @param client_secret mixed string Required. The client secret you received from
     * GitHub when you registered.
     * @param code mixed string Required. The code you received as a response to Step
     * 1.
     * @param redirect_uri mixed string The URL in your app where users will be sent
     * after authorization. See details below about redirect urls.
     */
    public function accessToken($client_id, $client_secret, $code, $redirect_uri);

    /**
     * revokeAllAuthority
     *
     * @param Authorization mixed The oauth2 bearer token
     * @param client_id mixed The id of the client.
     */
    public function revokeAllAuthority($Authorization, $client_id);

    /**
     * getUserEmails
     *
     * Get users email addresses
     *
     * @param Authorization mixed The oauth2 bearer token
     */
    public function getUserEmails($Authorization);

    /**
     * addUserEmails
     *
     * Get users email addresses
     *
     * @param Authorization mixed The oauth2 bearer token
     * @param emails mixed Array of the emails to add
     */
    public function addUserEmails($Authorization, $emails);

    /**
     * listUserRepos
     *
     * List repositories for the authenticated user. Note that this does not include
     * repositories owned by organizations which the user can access. You can list user
     * organizations and list organization repositories separately.
     *
     * @param Authorization mixed The oauth2 bearer token
     */
    public function listUserRepos($Authorization);

    /**
     * getUserInfoByName
     *
     * @param Authorization mixed The oauth2 bearer token
     * @param username mixed The username of the client.
     */
    public function getUserInfoByName($Authorization, $username);

    /**
     * getUserInfo
     *
     * @param Authorization mixed The oauth2 bearer token
     */
    public function getUserInfo($Authorization);

    /**
     * listRepoTags
     *
     * List tags for a repository. Response can be paged. This can be used either as a
     * authed request (for private repos and higher rate limiting), or as unsigned,
     * (public only, lower limit).
     *
     * @param Authorization mixed The oauth2 bearer token
     * @param owner mixed 
     * @param repo mixed
     */
    public function listRepoTags($Authorization, $owner, $repo);

    /**
     * listRepoCommitsPaginate
     *
     * @param Authorization mixed The oauth2 bearer token
     * @param pageURL mixed
     */
    public function listRepoCommitsPaginate($Authorization, $pageURL);

    /**
     * listRepoCommits
     *
     * @param Authorization mixed The oauth2 bearer token
     * @param owner mixed 
     * @param repo mixed
     */
    public function listRepoCommits($Authorization, $owner, $repo);

    /**
     * getSingleCommit
     *
     * @param Authorization mixed The oauth2 bearer token
     * @param owner mixed 
     * @param repo mixed 
     * @param sha mixed SHA of the commit to get
     */
    public function getSingleCommit($Authorization, $owner, $repo, $sha);


}
