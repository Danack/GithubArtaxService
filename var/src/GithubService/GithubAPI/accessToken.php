<?php

//Auto-generated by ArtaxServiceBuilder - https://github.com/Danack/ArtaxServiceBuilder
//
//Do not be surprised if any changes to this file are over-written.
//
namespace GithubService\GithubAPI;

class accessToken implements \ArtaxServiceBuilder\Operation
{

    /**
     * @var $api \GithubService\GithubAPI\GithubAPI
     */
    public $api = null;

    /**
     * @var $api array
     */
    public $parameters = null;

    /**
     * @var $api \Artax\Response
     */
    public $response = null;

    /**
     * Get the last response.
     *
     * @return \Artax\Response
     */
    public function getResponse()
    {
        return $this->response;
    }

    public function __construct(\GithubService\GithubAPI\GithubAPI $api, $userAgent, $client_id, $client_secret, $code, $redirect_uri)
    {
        $defaultParams = [
            'Accept' => 'application/json',
        ];
        $this->setParams($defaultParams);
        $this->api = $api;
        $this->parameters['userAgent'] = $userAgent;
        $this->parameters['client_id'] = $client_id;
        $this->parameters['client_secret'] = $client_secret;
        $this->parameters['code'] = $code;
        $this->parameters['redirect_uri'] = $redirect_uri;
    }

    public function setAPI(\GithubService\GithubAPI\GithubAPI $api)
    {
        $this->api = $api;
    }

    public function setParams(array $params)
    {
        if (array_key_exists('Accept', $params)) {
             $this->parameters['Accept'] = $params['Accept'];
        }
        if (array_key_exists('userAgent', $params)) {
             $this->parameters['userAgent'] = $params['userAgent'];
        }
        if (array_key_exists('client_id', $params)) {
             $this->parameters['client_id'] = $params['client_id'];
        }
        if (array_key_exists('client_secret', $params)) {
             $this->parameters['client_secret'] = $params['client_secret'];
        }
        if (array_key_exists('code', $params)) {
             $this->parameters['code'] = $params['code'];
        }
        if (array_key_exists('redirect_uri', $params)) {
             $this->parameters['redirect_uri'] = $params['redirect_uri'];
        }
    }

    public function setAccept($Accept)
    {
        $this->parameters['Accept'] = $Accept;
    }

    public function setUserAgent($userAgent)
    {
        $this->parameters['userAgent'] = $userAgent;
    }

    public function setClient_id($client_id)
    {
        $this->parameters['client_id'] = $client_id;
    }

    public function setClient_secret($client_secret)
    {
        $this->parameters['client_secret'] = $client_secret;
    }

    public function setCode($code)
    {
        $this->parameters['code'] = $code;
    }

    public function setRedirect_uri($redirect_uri)
    {
        $this->parameters['redirect_uri'] = $redirect_uri;
    }

    public function getParameters()
    {
        return $this->parameters;
    }

    /**
     * Apply any filters necessary to the parameter
     *
     * @return \GithubService\Model\AccessResponse
     */
    public function getFilteredParameter($name)
    {
        if (array_key_exists($name, $this->parameters) == false) {
            throw new \Exception('Parameter '.$name.' does not exist.');
        }

        $value = $this->parameters[$name];


        return $value;
    }

    public function createRequest()
    {
        $request = new \Artax\Request();
        $url = "https://github.com/login/oauth/access_token";
        $request->setMethod('POST');
        $queryParameters = [];


        $request->setHeader('Accept', $this->getFilteredParameter('Accept'));
        $request->setHeader('User-Agent', $this->getFilteredParameter('userAgent'));
        $queryParameters['client_id'] = $this->getFilteredParameter('client_id');
        $queryParameters['client_secret'] = $this->getFilteredParameter('client_secret');
        $queryParameters['code'] = $this->getFilteredParameter('code');
        $queryParameters['redirect_uri'] = $this->getFilteredParameter('redirect_uri');

        //Parameters are parsed and set, lets prepare the request
        if (count($queryParameters)) {
            $url = $url.'?'.http_build_query($queryParameters, '', '&', PHP_QUERY_RFC3986);
        }
        $request->setUri($url);

        return $request;
    }

    /**
     * Create and call the operation, returning the raw response from the server.
     *
     * @return \Artax\Response
     */
    public function createAndCall()
    {
        $request = $this->createRequest();
        $response = $this->api->callAPI($request);
        $this->response = $response;

        return $response;
    }

    /**
     * Execute the operation
     *
     * @return \GithubService\Model\AccessResponse
     */
    public function execute()
    {
        $request = $this->createRequest();
        $response = $this->api->callAPI($request);
        $this->response = $response;
        $instance = \GithubService\Model\AccessResponse::createFromResponse($response, $this);

        return $instance;
    }

    /**
     * Dispatch the request for this operation and process the response.Allows you to
     * modify the request before it is sent.
     *
     * @return \GithubService\Model\AccessResponse
     */
    public function dispatch(\Artax\Request $request)
    {
        $response = $this->api->callAPI($request);
        $this->response = $response;
        $instance = \GithubService\Model\AccessResponse::createFromResponse($response, $this);

        return $instance;
    }


}
