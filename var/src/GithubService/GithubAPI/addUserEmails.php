<?php

//Auto-generated by ArtaxServiceBuilder - https://github.com/Danack/ArtaxServiceBuilder
//
//Do not be surprised if any changes to this file are over-written.
//
namespace GithubService\GithubAPI;

class addUserEmails implements \ArtaxServiceBuilder\Operation
{

    /**
     * @var $api \GithubService\GithubAPI\GithubAPI
     */
    public $api = null;

    /**
     * @var $api array
     */
    public $parameters = null;

    /**
     * @var $api \Artax\Response
     */
    public $response = null;

    /**
     * Get the last response.
     *
     * @return \Artax\Response
     */
    public function getResponse()
    {
        return $this->response;
    }

    public function __construct(\GithubService\GithubAPI\GithubAPI $api, $Authorization, $userAgent, $emails)
    {
        $defaultParams = [
            'Accept' => 'application/json',
        ];
        $this->setParams($defaultParams);
        $this->api = $api;
        $this->parameters['Authorization'] = $Authorization;
        $this->parameters['userAgent'] = $userAgent;
        $this->parameters['emails'] = $emails;
    }

    public function setAPI(\GithubService\GithubAPI\GithubAPI $api)
    {
        $this->api = $api;
    }

    public function setParams(array $params)
    {
        if (array_key_exists('Accept', $params)) {
             $this->parameters['Accept'] = $params['Accept'];
        }
        if (array_key_exists('Authorization', $params)) {
             $this->parameters['Authorization'] = $params['Authorization'];
        }
        if (array_key_exists('userAgent', $params)) {
             $this->parameters['userAgent'] = $params['userAgent'];
        }
        if (array_key_exists('emails', $params)) {
             $this->parameters['emails'] = $params['emails'];
        }
    }

    public function checkScopeRequirement(array $allowedScopes)
    {
        //For each of the elements, all of the scopes in that element
        //must be satisfied
        $requiredScopesArray = [
            ['user']
        ];

        foreach($requiredScopesArray as $requiredScopes) {
            $requirementMet = true;
            foreach ($requiredScopes as $requiredScope) {
                if (in_array($requiredScope, $allowedScopes) == false) {
                    $requirementMet = false;
                    break;
                }
            }

            if ($requirementMet == true) {
                return true;
            }
        }

        return false;
    }

    public function setAccept($Accept)
    {
        $this->parameters['Accept'] = $Accept;
    }

    public function setAuthorization($Authorization)
    {
        $this->parameters['Authorization'] = $Authorization;
    }

    public function setUserAgent($userAgent)
    {
        $this->parameters['userAgent'] = $userAgent;
    }

    public function setEmails($emails)
    {
        $this->parameters['emails'] = $emails;
    }

    public function getParameters()
    {
        return $this->parameters;
    }

    public function createRequest()
    {
        $request = new \Artax\Request();
        $url = "https://api.github.com/user/emails";
        $request->setMethod('POST');
        $queryParameters = [];


        $jsonParams = [];
        $request->setHeader('Accept', $this->parameters['Accept']);
        $request->setHeader('Authorization', $this->parameters['Authorization']);
        $request->setHeader('User-Agent', $this->parameters['userAgent']);
        $jsonParams['emails'] = $this->parameters['emails'];

        //Parameters are parsed and set, lets prepare the request
        if (count($jsonParams)) {
            $jsonBody = json_encode($jsonParams);
            $request->setHeader("Content-Type", "application/json");
            $request->setBody($jsonBody);
        }
        $request->setUri($url);

        return $request;
    }

    /**
     * Create and call the operation, returning the raw response from the server.
     *
     * @return \Artax\Response
     */
    public function createAndCall()
    {
        $request = $this->createRequest();
        $response = $this->api->callAPI($request);
        $this->response = $response;

        return $response;
    }

    /**
     * Execute the operation
     *
     * @return \GithubService\Model\Emails
     */
    public function execute()
    {
        $request = $this->createRequest();
        $response = $this->api->callAPI($request);
        $this->response = $response;
        $instance = \GithubService\Model\Emails::createFromResponse($response, $this);

        return $instance;
    }

    /**
     * Dispatch the request for this operation and process the response.Allows you to
     * modify the request before it is sent.
     *
     * @return \GithubService\Model\Emails
     */
    public function dispatch(\Artax\Request $request)
    {
        $response = $this->api->callAPI($request);
        $this->response = $response;
        $instance = \GithubService\Model\Emails::createFromResponse($response, $this);

        return $instance;
    }


}
