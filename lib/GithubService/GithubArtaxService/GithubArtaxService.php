<?php

//Auto-generated by ArtaxServiceBuilder - https://github.com/Danack/ArtaxServiceBuilder
//
//Do not be surprised when any changes to this file are over-written.
//
namespace GithubService\GithubArtaxService;

use Amp\Artax\Request;
use Amp\Artax\Response;
use Amp\Reactor;
use GithubService\Operation\getOauthAuthorization;
use ArtaxServiceBuilder\BadResponseException;
use ArtaxServiceBuilder\ProcessResponseException;
use GithubService\Operation\listEmojis;
use GithubService\Operation\listUsersGists;
use GithubService\Operation\listSelfGists;
use GithubService\Operation\listPublicGists;
use GithubService\Operation\listSelfStarredGists;
use GithubService\Operation\getGist;
use GithubService\Operation\getGistByRevision;
use GithubService\Operation\createGist;
use GithubService\Operation\updateGist;
use GithubService\Operation\listGistCommits;
use GithubService\Operation\starGist;
use GithubService\Operation\unstarGist;
use GithubService\Operation\checkGistStarred;
use GithubService\Operation\forkGist;
use GithubService\Operation\listGistForks;
use GithubService\Operation\deleteGist;
use GithubService\Operation\listGitIgnoreTemplates;
use GithubService\Operation\getGitIgnoreTemplate;
use GithubService\Operation\listIssues;
use GithubService\Operation\listRepoIssues;
use GithubService\Operation\getIssue;
use GithubService\Operation\createIssue;
use GithubService\Operation\updateIssue;
use GithubService\Operation\listLicenses;
use GithubService\Operation\getLicense;
use GithubService\Operation\getRepoLicense;
use GithubService\Operation\renderMarkdown;
use GithubService\Operation\renderMarkdownRaw;
use GithubService\Operation\getMeta;
use GithubService\Operation\stubBasicAuth;
use GithubService\Operation\getAuthorizations;
use GithubService\Operation\getAuthorization;
use GithubService\Operation\createAuthorization;
use GithubService\Operation\getOrCreateAuthorization;
use GithubService\Operation\getOrCreateAuthorizationForAppFingerprint;
use GithubService\Operation\updateAuthorization;
use GithubService\Operation\deleteAuthorization;
use GithubService\Operation\checkAuthorization;
use GithubService\Operation\resetAuthorization;
use GithubService\Operation\revokeAllAuthority;
use GithubService\Operation\revokeAuthorityForApplication;
use GithubService\Operation\listPRComments;
use GithubService\Operation\listRepoComments;
use GithubService\Operation\getPRComment;
use GithubService\Operation\createPRComment;
use GithubService\Operation\updatePRComment;
use GithubService\Operation\deletePRComment;
use GithubService\Operation\linkPRRelations;
use GithubService\Operation\getPR;
use GithubService\Operation\getPRMergeability;
use GithubService\Operation\createPR;
use GithubService\Operation\updatePR;
use GithubService\Operation\listCommitsOnPR;
use GithubService\Operation\checkPRMerged;
use GithubService\Operation\mergePR;
use GithubService\Operation\listCollaborators;
use GithubService\Operation\isUserCollaborator;
use GithubService\Operation\addUserAsCollaborator;
use GithubService\Operation\removeUserAsCollaborator;
use GithubService\Operation\listCommitCommentsRepo;
use GithubService\Operation\listCommitComments;
use GithubService\Operation\createCommitComment;
use GithubService\Operation\getCommitComment;
use GithubService\Operation\updateCommitComment;
use GithubService\Operation\deleteCommitComment;
use GithubService\Operation\listRepoCommits;
use GithubService\Operation\getCommit;
use GithubService\Operation\compareTwoCommits;
use GithubService\Operation\compareTwoCommitsForks;
use GithubService\Operation\getRepoReadme;
use GithubService\Operation\getFileContents;
use GithubService\Operation\createRepoFile;
use GithubService\Operation\updateRepoFile;
use GithubService\Operation\deleteRepoFile;
use GithubService\Operation\getArchiveLink;
use GithubService\Operation\getDevArchiveLink;
use GithubService\Operation\updateFile;
use GithubService\Operation\listDeployments;
use GithubService\Operation\createDeployment;
use GithubService\Operation\updateDeployment;
use GithubService\Operation\createDeploymentStatus;
use GithubService\Operation\listForks;
use GithubService\Operation\createFork;
use GithubService\Operation\listHooks;
use GithubService\Operation\createHook;
use GithubService\Operation\updateHook;
use GithubService\Operation\testHook;
use GithubService\Operation\pingHook;
use GithubService\Operation\deleteHook;
use GithubService\Operation\listDeployKeys;
use GithubService\Operation\getDeployKey;
use GithubService\Operation\addDeployKey;
use GithubService\Operation\updateDeployKey;
use GithubService\Operation\performMerge;
use GithubService\Operation\getPagesInfo;
use GithubService\Operation\listPagesBuilds;
use GithubService\Operation\listPagesBuildLatest;
use GithubService\Operation\getRepoContributors;
use GithubService\Operation\getRepoCodeFrequency;
use GithubService\Operation\getRepoParticipation;
use GithubService\Operation\getRepoPunchCard;
use GithubService\Operation\createStatus;
use GithubService\Operation\listStatusesForRef;
use GithubService\Operation\getCombinedStatusForRef;
use GithubService\Operation\listSelfRepos;
use GithubService\Operation\listUserRepos;
use GithubService\Operation\listOrgRepos;
use GithubService\Operation\listPublicRepos;
use GithubService\Operation\createRepo;
use GithubService\Operation\getRepo;
use GithubService\Operation\updateRepo;
use GithubService\Operation\listRepoContributors;
use GithubService\Operation\listRepoLanguages;
use GithubService\Operation\listRepoTeams;
use GithubService\Operation\listRepoTags;
use GithubService\Operation\listRepoBranches;
use GithubService\Operation\getRepoBranch;
use GithubService\Operation\deleteRepo;
use GithubService\Operation\searchRepos;
use GithubService\Operation\searchCode;
use GithubService\Operation\searchIssues;
use GithubService\Operation\searchUsers;
use GithubService\Operation\listUserEmails;
use GithubService\Operation\addUserEmail;
use GithubService\Operation\deleteUserEmail;
use GithubService\Operation\getUser;
use GithubService\Operation\getSelfUser;
use GithubService\Operation\updateSelfUser;
use GithubService\Operation\getAllUsers;
use GithubService\Operation\listEmojisPaginate;
use GithubService\Operation\listUsersGistsPaginate;
use GithubService\Operation\listSelfGistsPaginate;
use GithubService\Operation\listPublicGistsPaginate;
use GithubService\Operation\listSelfStarredGistsPaginate;
use GithubService\Operation\getGistPaginate;
use GithubService\Operation\getGistByRevisionPaginate;
use GithubService\Operation\listGistCommitsPaginate;
use GithubService\Operation\checkGistStarredPaginate;
use GithubService\Operation\listGistForksPaginate;
use GithubService\Operation\listGitIgnoreTemplatesPaginate;
use GithubService\Operation\getGitIgnoreTemplatePaginate;
use GithubService\Operation\getAuthorizationsPaginate;
use GithubService\Operation\getAuthorizationPaginate;
use GithubService\Operation\listRepoCommitsPaginate;
use GithubService\Operation\getCommitPaginate;
use GithubService\Operation\compareTwoCommitsPaginate;
use GithubService\Operation\compareTwoCommitsForksPaginate;
use GithubService\Operation\listSelfReposPaginate;
use GithubService\Operation\listUserReposPaginate;
use GithubService\Operation\listOrgReposPaginate;
use GithubService\Operation\listPublicReposPaginate;
use GithubService\Operation\getRepoPaginate;
use GithubService\Operation\listRepoContributorsPaginate;
use GithubService\Operation\listRepoLanguagesPaginate;
use GithubService\Operation\listRepoTeamsPaginate;
use GithubService\Operation\listRepoTagsPaginate;
use GithubService\Operation\listRepoBranchesPaginate;
use GithubService\Operation\getRepoBranchPaginate;
use GithubService\Operation\searchReposPaginate;
use GithubService\Operation\listUserEmailsPaginate;
use GithubService\Operation\getUserPaginate;
use GithubService\Operation\getSelfUserPaginate;
use ArtaxServiceBuilder\ResponseCache;

abstract class GithubArtaxService implements \GithubService\GithubService {

    /**
     * @var \ $userAgent
     */
    public $userAgent = null;

    /**
     * @var \ArtaxServiceBuilder\ResponseCache $responseCache
     */
    public $responseCache = null;

    /**
     * @var \Amp\Reactor $reactor
     */
    public $reactor = null;

    public function __construct(\Amp\Artax\Client $client, \Amp\Reactor $reactor, \ArtaxServiceBuilder\ResponseCache $responseCache, $userAgent) {
        $this->client = $client;
        $this->reactor = $reactor;
        $this->responseCache = $responseCache;
        $this->userAgent = $userAgent;
    }

    /**
     * getOauthAuthorization
     *
     * Retrieve the Outh2 token for an application. You should have directed the user
     * to https://github.com/login/oauth/authorize with client_id etc set before
     * calling this.
     *
     * @param mixed $client_id string Required. The client ID you received from GitHub
     * when you registered.
     * @param mixed $client_secret string Required. The client secret you received from
     * GitHub when you registered.
     * @param mixed $code string Required. The code you received as a response to Step
     * 1.
     * @return \GithubService\Operation\getOauthAuthorization The new operation
     */
    public function getOauthAuthorization($client_id, $client_secret, $code) {
        $instance = new getOauthAuthorization($this, $this->getUserAgent(), $client_id, $client_secret, $code);
        return $instance;
    }

    /**
     * listEmojis
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @return \GithubService\Operation\listEmojis The new operation
     */
    public function listEmojis($authorization) {
        $instance = new listEmojis($this, $authorization, $this->getUserAgent());
        return $instance;
    }

    /**
     * listUsersGists
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param string $username 
     * @return \GithubService\Operation\listUsersGists The new operation
     */
    public function listUsersGists($authorization, $username) {
        $instance = new listUsersGists($this, $authorization, $this->getUserAgent(), $username);
        return $instance;
    }

    /**
     * listSelfGists
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @return \GithubService\Operation\listSelfGists The new operation
     */
    public function listSelfGists($authorization) {
        $instance = new listSelfGists($this, $authorization, $this->getUserAgent());
        return $instance;
    }

    /**
     * listPublicGists
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @return \GithubService\Operation\listPublicGists The new operation
     */
    public function listPublicGists($authorization) {
        $instance = new listPublicGists($this, $authorization, $this->getUserAgent());
        return $instance;
    }

    /**
     * listSelfStarredGists
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @return \GithubService\Operation\listSelfStarredGists The new operation
     */
    public function listSelfStarredGists($authorization) {
        $instance = new listSelfStarredGists($this, $authorization, $this->getUserAgent());
        return $instance;
    }

    /**
     * getGist
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @return \GithubService\Operation\getGist The new operation
     */
    public function getGist($authorization) {
        $instance = new getGist($this, $authorization, $this->getUserAgent());
        return $instance;
    }

    /**
     * getGistByRevision
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @return \GithubService\Operation\getGistByRevision The new operation
     */
    public function getGistByRevision($authorization) {
        $instance = new getGistByRevision($this, $authorization, $this->getUserAgent());
        return $instance;
    }

    /**
     * createGist
     *
     * @return \GithubService\Operation\createGist The new operation
     */
    public function createGist() {
        $instance = new createGist($this);
        return $instance;
    }

    /**
     * updateGist
     *
     * @return \GithubService\Operation\updateGist The new operation
     */
    public function updateGist() {
        $instance = new updateGist($this);
        return $instance;
    }

    /**
     * listGistCommits
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @return \GithubService\Operation\listGistCommits The new operation
     */
    public function listGistCommits($authorization) {
        $instance = new listGistCommits($this, $authorization, $this->getUserAgent());
        return $instance;
    }

    /**
     * starGist
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @return \GithubService\Operation\starGist The new operation
     */
    public function starGist($authorization) {
        $instance = new starGist($this, $authorization, $this->getUserAgent());
        return $instance;
    }

    /**
     * unstarGist
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @return \GithubService\Operation\unstarGist The new operation
     */
    public function unstarGist($authorization) {
        $instance = new unstarGist($this, $authorization, $this->getUserAgent());
        return $instance;
    }

    /**
     * checkGistStarred
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param string $id The id of the gist to check
     * @return \GithubService\Operation\checkGistStarred The new operation
     */
    public function checkGistStarred($authorization, $id) {
        $instance = new checkGistStarred($this, $authorization, $this->getUserAgent(), $id);
        return $instance;
    }

    /**
     * forkGist
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @return \GithubService\Operation\forkGist The new operation
     */
    public function forkGist($authorization) {
        $instance = new forkGist($this, $authorization, $this->getUserAgent());
        return $instance;
    }

    /**
     * listGistForks
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @return \GithubService\Operation\listGistForks The new operation
     */
    public function listGistForks($authorization) {
        $instance = new listGistForks($this, $authorization, $this->getUserAgent());
        return $instance;
    }

    /**
     * deleteGist
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @return \GithubService\Operation\deleteGist The new operation
     */
    public function deleteGist($authorization) {
        $instance = new deleteGist($this, $authorization, $this->getUserAgent());
        return $instance;
    }

    /**
     * listGitIgnoreTemplates
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @return \GithubService\Operation\listGitIgnoreTemplates The new operation
     */
    public function listGitIgnoreTemplates($authorization) {
        $instance = new listGitIgnoreTemplates($this, $authorization, $this->getUserAgent());
        return $instance;
    }

    /**
     * getGitIgnoreTemplate
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param string $type Which template to get.
     * @return \GithubService\Operation\getGitIgnoreTemplate The new operation
     */
    public function getGitIgnoreTemplate($authorization, $type) {
        $instance = new getGitIgnoreTemplate($this, $authorization, $this->getUserAgent(), $type);
        return $instance;
    }

    /**
     * listIssues
     *
     * @return \GithubService\Operation\listIssues The new operation
     */
    public function listIssues() {
        $instance = new listIssues($this);
        return $instance;
    }

    /**
     * listRepoIssues
     *
     * @return \GithubService\Operation\listRepoIssues The new operation
     */
    public function listRepoIssues() {
        $instance = new listRepoIssues($this);
        return $instance;
    }

    /**
     * getIssue
     *
     * @return \GithubService\Operation\getIssue The new operation
     */
    public function getIssue() {
        $instance = new getIssue($this);
        return $instance;
    }

    /**
     * createIssue
     *
     * @return \GithubService\Operation\createIssue The new operation
     */
    public function createIssue() {
        $instance = new createIssue($this);
        return $instance;
    }

    /**
     * updateIssue
     *
     * @return \GithubService\Operation\updateIssue The new operation
     */
    public function updateIssue() {
        $instance = new updateIssue($this);
        return $instance;
    }

    /**
     * listLicenses
     *
     * @return \GithubService\Operation\listLicenses The new operation
     */
    public function listLicenses() {
        $instance = new listLicenses($this);
        return $instance;
    }

    /**
     * getLicense
     *
     * @return \GithubService\Operation\getLicense The new operation
     */
    public function getLicense() {
        $instance = new getLicense($this);
        return $instance;
    }

    /**
     * getRepoLicense
     *
     * @return \GithubService\Operation\getRepoLicense The new operation
     */
    public function getRepoLicense() {
        $instance = new getRepoLicense($this);
        return $instance;
    }

    /**
     * renderMarkdown
     *
     * @return \GithubService\Operation\renderMarkdown The new operation
     */
    public function renderMarkdown() {
        $instance = new renderMarkdown($this);
        return $instance;
    }

    /**
     * renderMarkdownRaw
     *
     * @return \GithubService\Operation\renderMarkdownRaw The new operation
     */
    public function renderMarkdownRaw() {
        $instance = new renderMarkdownRaw($this);
        return $instance;
    }

    /**
     * getMeta
     *
     * @return \GithubService\Operation\getMeta The new operation
     */
    public function getMeta() {
        $instance = new getMeta($this);
        return $instance;
    }

    /**
     * stubBasicAuth
     *
     * @param mixed $Authorization The basic authentication token
     * @return \GithubService\Operation\stubBasicAuth The new operation
     */
    public function stubBasicAuth($authorization) {
        $instance = new stubBasicAuth($this, $this->getUserAgent(), $authorization);
        return $instance;
    }

    /**
     * getAuthorizations
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @return \GithubService\Operation\getAuthorizations The new operation
     */
    public function getAuthorizations($authorization) {
        $instance = new getAuthorizations($this, $authorization, $this->getUserAgent());
        return $instance;
    }

    /**
     * getAuthorization
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $id Which authorization to get
     * @return \GithubService\Operation\getAuthorization The new operation
     */
    public function getAuthorization($authorization, $id) {
        $instance = new getAuthorization($this, $authorization, $this->getUserAgent(), $id);
        return $instance;
    }

    /**
     * createAuthorization
     *
     * @param mixed $Authorization The basic authentication token
     * @param mixed $scopes 
     * @param mixed $note 
     * @return \GithubService\Operation\createAuthorization The new operation
     */
    public function createAuthorization($authorization, $scopes, $note) {
        $instance = new createAuthorization($this, $this->getUserAgent(), $authorization, $scopes, $note);
        return $instance;
    }

    /**
     * getOrCreateAuthorization
     *
     * @param mixed $Authorization The basic authentication token
     * @param mixed $scopes A list of scopes that this authorization is in.
     * @param mixed $note A note to remind you what the OAuth token is for.
     * @param mixed $note_url A URL to remind you what app the OAuth token is for.
     * @param mixed $client_id The 20 character OAuth app client key for which to
     * create the token.
     * @param mixed $client_secret The 40 character OAuth app client secret for which
     * to create the token.
     * @return \GithubService\Operation\getOrCreateAuthorization The new operation
     */
    public function getOrCreateAuthorization($authorization, $scopes, $note, $note_url, $client_id, $client_secret) {
        $instance = new getOrCreateAuthorization($this, $this->getUserAgent(), $authorization, $scopes, $note, $note_url, $client_id, $client_secret);
        return $instance;
    }

    /**
     * getOrCreateAuthorizationForAppFingerprint
     *
     * @param mixed $client_secret The 40 character OAuth app client secret associated
     * with the client ID specified in the URL.
     * @param mixed $scopes A list of scopes that this authorization is in.
     * @param mixed $note A note to remind you what the OAuth token is for.
     * @param mixed $note_url A URL to remind you what app the OAuth token is for.
     * @param mixed $fingerprint This attribute is only available when using the
     * [mirage-preview](#deprecation-notice) media type.** A unique string to
     * distinguish an authorization from others created for the same client ID and
     * user.
     * @return \GithubService\Operation\getOrCreateAuthorizationForAppFingerprint The
     * new operation
     */
    public function getOrCreateAuthorizationForAppFingerprint($client_secret, $scopes, $note, $note_url, $fingerprint) {
        $instance = new getOrCreateAuthorizationForAppFingerprint($this, $client_secret, $scopes, $note, $note_url, $fingerprint);
        return $instance;
    }

    /**
     * updateAuthorization
     *
     * @param mixed $scopes Replaces the authorization scopes with these.
     * @param mixed $add_scopes A list of scopes to add to this authorization.
     * @param mixed $remove_scopes A list of scopes to remove from this authorization.
     * @param mixed $note A note to remind you what the OAuth token is for.
     * @param mixed $note_url A URL to remind you what app the OAuth token is for.
     * @param mixed $fingerprint **This attribute is only available when using the
     * [mirage-preview](#deprecation-notice) media type.** A unique string to
     * distinguish an authorization from others created for the same client ID and
     * user.
     * @return \GithubService\Operation\updateAuthorization The new operation
     */
    public function updateAuthorization($scopes, $add_scopes, $remove_scopes, $note, $note_url, $fingerprint) {
        $instance = new updateAuthorization($this, $scopes, $add_scopes, $remove_scopes, $note, $note_url, $fingerprint);
        return $instance;
    }

    /**
     * deleteAuthorization
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @return \GithubService\Operation\deleteAuthorization The new operation
     */
    public function deleteAuthorization($authorization) {
        $instance = new deleteAuthorization($this, $authorization, $this->getUserAgent());
        return $instance;
    }

    /**
     * checkAuthorization
     *
     * @param mixed $Authorization The basic authentication token
     * @param mixed $client_id 
     * @param mixed $access_token 
     * @return \GithubService\Operation\checkAuthorization The new operation
     */
    public function checkAuthorization($authorization, $client_id, $access_token) {
        $instance = new checkAuthorization($this, $this->getUserAgent(), $authorization, $client_id, $access_token);
        return $instance;
    }

    /**
     * resetAuthorization
     *
     * @param mixed $Authorization The basic authentication token
     * @param mixed $client_id 
     * @param mixed $access_token 
     * @return \GithubService\Operation\resetAuthorization The new operation
     */
    public function resetAuthorization($authorization, $client_id, $access_token) {
        $instance = new resetAuthorization($this, $this->getUserAgent(), $authorization, $client_id, $access_token);
        return $instance;
    }

    /**
     * revokeAllAuthority
     *
     * @param mixed $Authorization The basic authentication token
     * @param mixed $client_id The id of the client.
     * @return \GithubService\Operation\revokeAllAuthority The new operation
     */
    public function revokeAllAuthority($authorization, $client_id) {
        $instance = new revokeAllAuthority($this, $this->getUserAgent(), $authorization, $client_id);
        return $instance;
    }

    /**
     * revokeAuthorityForApplication
     *
     * @param mixed $Authorization The basic authentication token
     * @param mixed $client_id The id of the client.
     * @param mixed $access_token The access token to delete.
     * @return \GithubService\Operation\revokeAuthorityForApplication The new operation
     */
    public function revokeAuthorityForApplication($authorization, $client_id, $access_token) {
        $instance = new revokeAuthorityForApplication($this, $this->getUserAgent(), $authorization, $client_id, $access_token);
        return $instance;
    }

    /**
     * listPRComments
     *
     * @return \GithubService\Operation\listPRComments The new operation
     */
    public function listPRComments() {
        $instance = new listPRComments($this);
        return $instance;
    }

    /**
     * listRepoComments
     *
     * @return \GithubService\Operation\listRepoComments The new operation
     */
    public function listRepoComments() {
        $instance = new listRepoComments($this);
        return $instance;
    }

    /**
     * getPRComment
     *
     * @return \GithubService\Operation\getPRComment The new operation
     */
    public function getPRComment() {
        $instance = new getPRComment($this);
        return $instance;
    }

    /**
     * createPRComment
     *
     * @return \GithubService\Operation\createPRComment The new operation
     */
    public function createPRComment() {
        $instance = new createPRComment($this);
        return $instance;
    }

    /**
     * updatePRComment
     *
     * @return \GithubService\Operation\updatePRComment The new operation
     */
    public function updatePRComment() {
        $instance = new updatePRComment($this);
        return $instance;
    }

    /**
     * deletePRComment
     *
     * @return \GithubService\Operation\deletePRComment The new operation
     */
    public function deletePRComment() {
        $instance = new deletePRComment($this);
        return $instance;
    }

    /**
     * linkPRRelations
     *
     * @return \GithubService\Operation\linkPRRelations The new operation
     */
    public function linkPRRelations() {
        $instance = new linkPRRelations($this);
        return $instance;
    }

    /**
     * getPR
     *
     * @return \GithubService\Operation\getPR The new operation
     */
    public function getPR() {
        $instance = new getPR($this);
        return $instance;
    }

    /**
     * getPRMergeability
     *
     * @return \GithubService\Operation\getPRMergeability The new operation
     */
    public function getPRMergeability() {
        $instance = new getPRMergeability($this);
        return $instance;
    }

    /**
     * createPR
     *
     * @return \GithubService\Operation\createPR The new operation
     */
    public function createPR() {
        $instance = new createPR($this);
        return $instance;
    }

    /**
     * updatePR
     *
     * @return \GithubService\Operation\updatePR The new operation
     */
    public function updatePR() {
        $instance = new updatePR($this);
        return $instance;
    }

    /**
     * listCommitsOnPR
     *
     * @return \GithubService\Operation\listCommitsOnPR The new operation
     */
    public function listCommitsOnPR() {
        $instance = new listCommitsOnPR($this);
        return $instance;
    }

    /**
     * checkPRMerged
     *
     * @return \GithubService\Operation\checkPRMerged The new operation
     */
    public function checkPRMerged() {
        $instance = new checkPRMerged($this);
        return $instance;
    }

    /**
     * mergePR
     *
     * @return \GithubService\Operation\mergePR The new operation
     */
    public function mergePR() {
        $instance = new mergePR($this);
        return $instance;
    }

    /**
     * listCollaborators
     *
     * @return \GithubService\Operation\listCollaborators The new operation
     */
    public function listCollaborators() {
        $instance = new listCollaborators($this);
        return $instance;
    }

    /**
     * isUserCollaborator
     *
     * @return \GithubService\Operation\isUserCollaborator The new operation
     */
    public function isUserCollaborator() {
        $instance = new isUserCollaborator($this);
        return $instance;
    }

    /**
     * addUserAsCollaborator
     *
     * @return \GithubService\Operation\addUserAsCollaborator The new operation
     */
    public function addUserAsCollaborator() {
        $instance = new addUserAsCollaborator($this);
        return $instance;
    }

    /**
     * removeUserAsCollaborator
     *
     * @return \GithubService\Operation\removeUserAsCollaborator The new operation
     */
    public function removeUserAsCollaborator() {
        $instance = new removeUserAsCollaborator($this);
        return $instance;
    }

    /**
     * listCommitCommentsRepo
     *
     * @return \GithubService\Operation\listCommitCommentsRepo The new operation
     */
    public function listCommitCommentsRepo() {
        $instance = new listCommitCommentsRepo($this);
        return $instance;
    }

    /**
     * listCommitComments
     *
     * @return \GithubService\Operation\listCommitComments The new operation
     */
    public function listCommitComments() {
        $instance = new listCommitComments($this);
        return $instance;
    }

    /**
     * createCommitComment
     *
     * @return \GithubService\Operation\createCommitComment The new operation
     */
    public function createCommitComment() {
        $instance = new createCommitComment($this);
        return $instance;
    }

    /**
     * getCommitComment
     *
     * @return \GithubService\Operation\getCommitComment The new operation
     */
    public function getCommitComment() {
        $instance = new getCommitComment($this);
        return $instance;
    }

    /**
     * updateCommitComment
     *
     * @return \GithubService\Operation\updateCommitComment The new operation
     */
    public function updateCommitComment() {
        $instance = new updateCommitComment($this);
        return $instance;
    }

    /**
     * deleteCommitComment
     *
     * @return \GithubService\Operation\deleteCommitComment The new operation
     */
    public function deleteCommitComment() {
        $instance = new deleteCommitComment($this);
        return $instance;
    }

    /**
     * listRepoCommits
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param string $owner The owner of the repository
     * @param string $repo The repository to get the commits for
     * @return \GithubService\Operation\listRepoCommits The new operation
     */
    public function listRepoCommits($authorization, $owner, $repo) {
        $instance = new listRepoCommits($this, $authorization, $this->getUserAgent(), $owner, $repo);
        return $instance;
    }

    /**
     * getCommit
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @return \GithubService\Operation\getCommit The new operation
     */
    public function getCommit($authorization) {
        $instance = new getCommit($this, $authorization, $this->getUserAgent());
        return $instance;
    }

    /**
     * compareTwoCommits
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @return \GithubService\Operation\compareTwoCommits The new operation
     */
    public function compareTwoCommits($authorization) {
        $instance = new compareTwoCommits($this, $authorization, $this->getUserAgent());
        return $instance;
    }

    /**
     * compareTwoCommitsForks
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @return \GithubService\Operation\compareTwoCommitsForks The new operation
     */
    public function compareTwoCommitsForks($authorization) {
        $instance = new compareTwoCommitsForks($this, $authorization, $this->getUserAgent());
        return $instance;
    }

    /**
     * getRepoReadme
     *
     * @return \GithubService\Operation\getRepoReadme The new operation
     */
    public function getRepoReadme() {
        $instance = new getRepoReadme($this);
        return $instance;
    }

    /**
     * getFileContents
     *
     * @return \GithubService\Operation\getFileContents The new operation
     */
    public function getFileContents() {
        $instance = new getFileContents($this);
        return $instance;
    }

    /**
     * createRepoFile
     *
     * @return \GithubService\Operation\createRepoFile The new operation
     */
    public function createRepoFile() {
        $instance = new createRepoFile($this);
        return $instance;
    }

    /**
     * updateRepoFile
     *
     * @return \GithubService\Operation\updateRepoFile The new operation
     */
    public function updateRepoFile() {
        $instance = new updateRepoFile($this);
        return $instance;
    }

    /**
     * deleteRepoFile
     *
     * @return \GithubService\Operation\deleteRepoFile The new operation
     */
    public function deleteRepoFile() {
        $instance = new deleteRepoFile($this);
        return $instance;
    }

    /**
     * getArchiveLink
     *
     * This method will return a 302 to a URL to download a tarball or zipball archive
     * for a repository. Please make sure your HTTP framework is configured to follow
     * redirects or you will need to use the Location header to make a second GET
     * request.
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $owner 
     * @param mixed $repo 
     * @param mixed $ref 
     * @return \GithubService\Operation\getArchiveLink The new operation
     */
    public function getArchiveLink($authorization, $owner, $repo, $ref) {
        $instance = new getArchiveLink($this, $authorization, $this->getUserAgent(), $owner, $repo, $ref);
        return $instance;
    }

    /**
     * getDevArchiveLink
     *
     * This method will return a 302 to a URL to download a tarball or zipball archive
     * for a repository. Please make sure your HTTP framework is configured to follow
     * redirects or you will need to use the Location header to make a second GET
     * request.
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $owner 
     * @param mixed $repo 
     * @return \GithubService\Operation\getDevArchiveLink The new operation
     */
    public function getDevArchiveLink($authorization, $owner, $repo) {
        $instance = new getDevArchiveLink($this, $authorization, $this->getUserAgent(), $owner, $repo);
        return $instance;
    }

    /**
     * updateFile
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $path The content path.
     * @param mixed $owner 
     * @param string $repo 
     * @param string $content The updated file content, Base64 encoded.
     * @param string $sha The blob SHA of the file being replaced.
     * @param string $branch The branch name. Default: the repository’s default
     * branch (usually master)
     * @param string $message The commit message.
     * @return \GithubService\Operation\updateFile The new operation
     */
    public function updateFile($authorization, $path, $owner, $repo, $content, $sha, $branch, $message) {
        $instance = new updateFile($this, $authorization, $this->getUserAgent(), $path, $owner, $repo, $content, $sha, $branch, $message);
        return $instance;
    }

    /**
     * listDeployments
     *
     * @return \GithubService\Operation\listDeployments The new operation
     */
    public function listDeployments() {
        $instance = new listDeployments($this);
        return $instance;
    }

    /**
     * createDeployment
     *
     * @return \GithubService\Operation\createDeployment The new operation
     */
    public function createDeployment() {
        $instance = new createDeployment($this);
        return $instance;
    }

    /**
     * updateDeployment
     *
     * @return \GithubService\Operation\updateDeployment The new operation
     */
    public function updateDeployment() {
        $instance = new updateDeployment($this);
        return $instance;
    }

    /**
     * createDeploymentStatus
     *
     * @return \GithubService\Operation\createDeploymentStatus The new operation
     */
    public function createDeploymentStatus() {
        $instance = new createDeploymentStatus($this);
        return $instance;
    }

    /**
     * listForks
     *
     * @return \GithubService\Operation\listForks The new operation
     */
    public function listForks() {
        $instance = new listForks($this);
        return $instance;
    }

    /**
     * createFork
     *
     * @return \GithubService\Operation\createFork The new operation
     */
    public function createFork() {
        $instance = new createFork($this);
        return $instance;
    }

    /**
     * listHooks
     *
     * @return \GithubService\Operation\listHooks The new operation
     */
    public function listHooks() {
        $instance = new listHooks($this);
        return $instance;
    }

    /**
     * createHook
     *
     * @return \GithubService\Operation\createHook The new operation
     */
    public function createHook() {
        $instance = new createHook($this);
        return $instance;
    }

    /**
     * updateHook
     *
     * @return \GithubService\Operation\updateHook The new operation
     */
    public function updateHook() {
        $instance = new updateHook($this);
        return $instance;
    }

    /**
     * testHook
     *
     * @return \GithubService\Operation\testHook The new operation
     */
    public function testHook() {
        $instance = new testHook($this);
        return $instance;
    }

    /**
     * pingHook
     *
     * @return \GithubService\Operation\pingHook The new operation
     */
    public function pingHook() {
        $instance = new pingHook($this);
        return $instance;
    }

    /**
     * deleteHook
     *
     * @return \GithubService\Operation\deleteHook The new operation
     */
    public function deleteHook() {
        $instance = new deleteHook($this);
        return $instance;
    }

    /**
     * listDeployKeys
     *
     * @return \GithubService\Operation\listDeployKeys The new operation
     */
    public function listDeployKeys() {
        $instance = new listDeployKeys($this);
        return $instance;
    }

    /**
     * getDeployKey
     *
     * @return \GithubService\Operation\getDeployKey The new operation
     */
    public function getDeployKey() {
        $instance = new getDeployKey($this);
        return $instance;
    }

    /**
     * addDeployKey
     *
     * @return \GithubService\Operation\addDeployKey The new operation
     */
    public function addDeployKey() {
        $instance = new addDeployKey($this);
        return $instance;
    }

    /**
     * updateDeployKey
     *
     * @return \GithubService\Operation\updateDeployKey The new operation
     */
    public function updateDeployKey() {
        $instance = new updateDeployKey($this);
        return $instance;
    }

    /**
     * performMerge
     *
     * @return \GithubService\Operation\performMerge The new operation
     */
    public function performMerge() {
        $instance = new performMerge($this);
        return $instance;
    }

    /**
     * getPagesInfo
     *
     * @return \GithubService\Operation\getPagesInfo The new operation
     */
    public function getPagesInfo() {
        $instance = new getPagesInfo($this);
        return $instance;
    }

    /**
     * listPagesBuilds
     *
     * @return \GithubService\Operation\listPagesBuilds The new operation
     */
    public function listPagesBuilds() {
        $instance = new listPagesBuilds($this);
        return $instance;
    }

    /**
     * listPagesBuildLatest
     *
     * @return \GithubService\Operation\listPagesBuildLatest The new operation
     */
    public function listPagesBuildLatest() {
        $instance = new listPagesBuildLatest($this);
        return $instance;
    }

    /**
     * getRepoContributors
     *
     * @return \GithubService\Operation\getRepoContributors The new operation
     */
    public function getRepoContributors() {
        $instance = new getRepoContributors($this);
        return $instance;
    }

    /**
     * getRepoCodeFrequency
     *
     * @return \GithubService\Operation\getRepoCodeFrequency The new operation
     */
    public function getRepoCodeFrequency() {
        $instance = new getRepoCodeFrequency($this);
        return $instance;
    }

    /**
     * getRepoParticipation
     *
     * @return \GithubService\Operation\getRepoParticipation The new operation
     */
    public function getRepoParticipation() {
        $instance = new getRepoParticipation($this);
        return $instance;
    }

    /**
     * getRepoPunchCard
     *
     * @return \GithubService\Operation\getRepoPunchCard The new operation
     */
    public function getRepoPunchCard() {
        $instance = new getRepoPunchCard($this);
        return $instance;
    }

    /**
     * createStatus
     *
     * @return \GithubService\Operation\createStatus The new operation
     */
    public function createStatus() {
        $instance = new createStatus($this);
        return $instance;
    }

    /**
     * listStatusesForRef
     *
     * @return \GithubService\Operation\listStatusesForRef The new operation
     */
    public function listStatusesForRef() {
        $instance = new listStatusesForRef($this);
        return $instance;
    }

    /**
     * getCombinedStatusForRef
     *
     * @return \GithubService\Operation\getCombinedStatusForRef The new operation
     */
    public function getCombinedStatusForRef() {
        $instance = new getCombinedStatusForRef($this);
        return $instance;
    }

    /**
     * listSelfRepos
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param string $type Can be one of `all`, `owner`, `member`. Default: `owner`
     * @param string $sort Can be one of `created`, `updated`, `pushed`, `full_name`.
     * Default: `full_name`
     * @param string $direction  Can be one of `asc` or `desc`. Default: when using
     * `full_name`: `asc`, otherwise `desc`
     * @return \GithubService\Operation\listSelfRepos The new operation
     */
    public function listSelfRepos($authorization, $type, $sort, $direction) {
        $instance = new listSelfRepos($this, $authorization, $this->getUserAgent(), $type, $sort, $direction);
        return $instance;
    }

    /**
     * listUserRepos
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param string $username The user to get the repos of.
     * @return \GithubService\Operation\listUserRepos The new operation
     */
    public function listUserRepos($authorization, $username) {
        $instance = new listUserRepos($this, $authorization, $this->getUserAgent(), $username);
        return $instance;
    }

    /**
     * listOrgRepos
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param string $org The organisation to get the repos of.
     * @param string $type Can be one of `all`, `public`, `private`, `forks`,
     * `sources`, `member`. Default: `all`
     * @return \GithubService\Operation\listOrgRepos The new operation
     */
    public function listOrgRepos($authorization, $org, $type) {
        $instance = new listOrgRepos($this, $authorization, $this->getUserAgent(), $org, $type);
        return $instance;
    }

    /**
     * listPublicRepos
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param string $since The integer ID of the last Repository that you've seen.
     * @return \GithubService\Operation\listPublicRepos The new operation
     */
    public function listPublicRepos($authorization, $since) {
        $instance = new listPublicRepos($this, $authorization, $this->getUserAgent(), $since);
        return $instance;
    }

    /**
     * createRepo
     *
     * @return \GithubService\Operation\createRepo The new operation
     */
    public function createRepo() {
        $instance = new createRepo($this);
        return $instance;
    }

    /**
     * getRepo
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param string $owner 
     * @param string $repo 
     * @return \GithubService\Operation\getRepo The new operation
     */
    public function getRepo($authorization, $owner, $repo) {
        $instance = new getRepo($this, $authorization, $this->getUserAgent(), $owner, $repo);
        return $instance;
    }

    /**
     * updateRepo
     *
     * @return \GithubService\Operation\updateRepo The new operation
     */
    public function updateRepo() {
        $instance = new updateRepo($this);
        return $instance;
    }

    /**
     * listRepoContributors
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param string $owner 
     * @param string $repo 
     * @param string $anon 
     * @return \GithubService\Operation\listRepoContributors The new operation
     */
    public function listRepoContributors($authorization, $owner, $repo, $anon) {
        $instance = new listRepoContributors($this, $authorization, $this->getUserAgent(), $owner, $repo, $anon);
        return $instance;
    }

    /**
     * listRepoLanguages
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param string $owner 
     * @param string $repo 
     * @return \GithubService\Operation\listRepoLanguages The new operation
     */
    public function listRepoLanguages($authorization, $owner, $repo) {
        $instance = new listRepoLanguages($this, $authorization, $this->getUserAgent(), $owner, $repo);
        return $instance;
    }

    /**
     * listRepoTeams
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param string $owner 
     * @param string $repo 
     * @return \GithubService\Operation\listRepoTeams The new operation
     */
    public function listRepoTeams($authorization, $owner, $repo) {
        $instance = new listRepoTeams($this, $authorization, $this->getUserAgent(), $owner, $repo);
        return $instance;
    }

    /**
     * listRepoTags
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param string $owner 
     * @param string $repo 
     * @return \GithubService\Operation\listRepoTags The new operation
     */
    public function listRepoTags($authorization, $owner, $repo) {
        $instance = new listRepoTags($this, $authorization, $this->getUserAgent(), $owner, $repo);
        return $instance;
    }

    /**
     * listRepoBranches
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param string $owner 
     * @param string $repo 
     * @return \GithubService\Operation\listRepoBranches The new operation
     */
    public function listRepoBranches($authorization, $owner, $repo) {
        $instance = new listRepoBranches($this, $authorization, $this->getUserAgent(), $owner, $repo);
        return $instance;
    }

    /**
     * getRepoBranch
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param string $username 
     * @return \GithubService\Operation\getRepoBranch The new operation
     */
    public function getRepoBranch($authorization, $username) {
        $instance = new getRepoBranch($this, $authorization, $this->getUserAgent(), $username);
        return $instance;
    }

    /**
     * deleteRepo
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param string $owner 
     * @param string $repo 
     * @return \GithubService\Operation\deleteRepo The new operation
     */
    public function deleteRepo($authorization, $owner, $repo) {
        $instance = new deleteRepo($this, $authorization, $this->getUserAgent(), $owner, $repo);
        return $instance;
    }

    /**
     * searchRepos
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param string $q The search keywords, as well as any qualifiers.
     * @return \GithubService\Operation\searchRepos The new operation
     */
    public function searchRepos($authorization, $q) {
        $instance = new searchRepos($this, $authorization, $this->getUserAgent(), $q);
        return $instance;
    }

    /**
     * searchCode
     *
     * @return \GithubService\Operation\searchCode The new operation
     */
    public function searchCode() {
        $instance = new searchCode($this);
        return $instance;
    }

    /**
     * searchIssues
     *
     * @return \GithubService\Operation\searchIssues The new operation
     */
    public function searchIssues() {
        $instance = new searchIssues($this);
        return $instance;
    }

    /**
     * searchUsers
     *
     * @return \GithubService\Operation\searchUsers The new operation
     */
    public function searchUsers() {
        $instance = new searchUsers($this);
        return $instance;
    }

    /**
     * listUserEmails
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @return \GithubService\Operation\listUserEmails The new operation
     */
    public function listUserEmails($authorization) {
        $instance = new listUserEmails($this, $authorization, $this->getUserAgent());
        return $instance;
    }

    /**
     * addUserEmail
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param string or array $username A single email address or an array of addresses
     * @return \GithubService\Operation\addUserEmail The new operation
     */
    public function addUserEmail($authorization, $username) {
        $instance = new addUserEmail($this, $authorization, $this->getUserAgent(), $username);
        return $instance;
    }

    /**
     * deleteUserEmail
     *
     * @return \GithubService\Operation\deleteUserEmail The new operation
     */
    public function deleteUserEmail() {
        $instance = new deleteUserEmail($this);
        return $instance;
    }

    /**
     * getUser
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param string $username The github name of the user.
     * @return \GithubService\Operation\getUser The new operation
     */
    public function getUser($authorization, $username) {
        $instance = new getUser($this, $authorization, $this->getUserAgent(), $username);
        return $instance;
    }

    /**
     * getSelfUser
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @return \GithubService\Operation\getSelfUser The new operation
     */
    public function getSelfUser($authorization) {
        $instance = new getSelfUser($this, $authorization, $this->getUserAgent());
        return $instance;
    }

    /**
     * updateSelfUser
     *
     * @return \GithubService\Operation\updateSelfUser The new operation
     */
    public function updateSelfUser() {
        $instance = new updateSelfUser($this);
        return $instance;
    }

    /**
     * getAllUsers
     *
     * @return \GithubService\Operation\getAllUsers The new operation
     */
    public function getAllUsers() {
        $instance = new getAllUsers($this);
        return $instance;
    }

    /**
     * listEmojisPaginate
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $pageURL 
     * @return \GithubService\Operation\listEmojisPaginate The new operation
     */
    public function listEmojisPaginate($authorization, $pageURL) {
        $instance = new listEmojisPaginate($this, $authorization, $this->getUserAgent(), $pageURL);
        return $instance;
    }

    /**
     * listUsersGistsPaginate
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $pageURL 
     * @return \GithubService\Operation\listUsersGistsPaginate The new operation
     */
    public function listUsersGistsPaginate($authorization, $pageURL) {
        $instance = new listUsersGistsPaginate($this, $authorization, $this->getUserAgent(), $pageURL);
        return $instance;
    }

    /**
     * listSelfGistsPaginate
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $pageURL 
     * @return \GithubService\Operation\listSelfGistsPaginate The new operation
     */
    public function listSelfGistsPaginate($authorization, $pageURL) {
        $instance = new listSelfGistsPaginate($this, $authorization, $this->getUserAgent(), $pageURL);
        return $instance;
    }

    /**
     * listPublicGistsPaginate
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $pageURL 
     * @return \GithubService\Operation\listPublicGistsPaginate The new operation
     */
    public function listPublicGistsPaginate($authorization, $pageURL) {
        $instance = new listPublicGistsPaginate($this, $authorization, $this->getUserAgent(), $pageURL);
        return $instance;
    }

    /**
     * listSelfStarredGistsPaginate
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $pageURL 
     * @return \GithubService\Operation\listSelfStarredGistsPaginate The new operation
     */
    public function listSelfStarredGistsPaginate($authorization, $pageURL) {
        $instance = new listSelfStarredGistsPaginate($this, $authorization, $this->getUserAgent(), $pageURL);
        return $instance;
    }

    /**
     * getGistPaginate
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $pageURL 
     * @return \GithubService\Operation\getGistPaginate The new operation
     */
    public function getGistPaginate($authorization, $pageURL) {
        $instance = new getGistPaginate($this, $authorization, $this->getUserAgent(), $pageURL);
        return $instance;
    }

    /**
     * getGistByRevisionPaginate
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $pageURL 
     * @return \GithubService\Operation\getGistByRevisionPaginate The new operation
     */
    public function getGistByRevisionPaginate($authorization, $pageURL) {
        $instance = new getGistByRevisionPaginate($this, $authorization, $this->getUserAgent(), $pageURL);
        return $instance;
    }

    /**
     * listGistCommitsPaginate
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $pageURL 
     * @return \GithubService\Operation\listGistCommitsPaginate The new operation
     */
    public function listGistCommitsPaginate($authorization, $pageURL) {
        $instance = new listGistCommitsPaginate($this, $authorization, $this->getUserAgent(), $pageURL);
        return $instance;
    }

    /**
     * checkGistStarredPaginate
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $pageURL 
     * @return \GithubService\Operation\checkGistStarredPaginate The new operation
     */
    public function checkGistStarredPaginate($authorization, $pageURL) {
        $instance = new checkGistStarredPaginate($this, $authorization, $this->getUserAgent(), $pageURL);
        return $instance;
    }

    /**
     * listGistForksPaginate
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $pageURL 
     * @return \GithubService\Operation\listGistForksPaginate The new operation
     */
    public function listGistForksPaginate($authorization, $pageURL) {
        $instance = new listGistForksPaginate($this, $authorization, $this->getUserAgent(), $pageURL);
        return $instance;
    }

    /**
     * listGitIgnoreTemplatesPaginate
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $pageURL 
     * @return \GithubService\Operation\listGitIgnoreTemplatesPaginate The new
     * operation
     */
    public function listGitIgnoreTemplatesPaginate($authorization, $pageURL) {
        $instance = new listGitIgnoreTemplatesPaginate($this, $authorization, $this->getUserAgent(), $pageURL);
        return $instance;
    }

    /**
     * getGitIgnoreTemplatePaginate
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $pageURL 
     * @return \GithubService\Operation\getGitIgnoreTemplatePaginate The new operation
     */
    public function getGitIgnoreTemplatePaginate($authorization, $pageURL) {
        $instance = new getGitIgnoreTemplatePaginate($this, $authorization, $this->getUserAgent(), $pageURL);
        return $instance;
    }

    /**
     * getAuthorizationsPaginate
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $pageURL 
     * @return \GithubService\Operation\getAuthorizationsPaginate The new operation
     */
    public function getAuthorizationsPaginate($authorization, $pageURL) {
        $instance = new getAuthorizationsPaginate($this, $authorization, $this->getUserAgent(), $pageURL);
        return $instance;
    }

    /**
     * getAuthorizationPaginate
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $pageURL 
     * @return \GithubService\Operation\getAuthorizationPaginate The new operation
     */
    public function getAuthorizationPaginate($authorization, $pageURL) {
        $instance = new getAuthorizationPaginate($this, $authorization, $this->getUserAgent(), $pageURL);
        return $instance;
    }

    /**
     * listRepoCommitsPaginate
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $pageURL 
     * @return \GithubService\Operation\listRepoCommitsPaginate The new operation
     */
    public function listRepoCommitsPaginate($authorization, $pageURL) {
        $instance = new listRepoCommitsPaginate($this, $authorization, $this->getUserAgent(), $pageURL);
        return $instance;
    }

    /**
     * getCommitPaginate
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $pageURL 
     * @return \GithubService\Operation\getCommitPaginate The new operation
     */
    public function getCommitPaginate($authorization, $pageURL) {
        $instance = new getCommitPaginate($this, $authorization, $this->getUserAgent(), $pageURL);
        return $instance;
    }

    /**
     * compareTwoCommitsPaginate
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $pageURL 
     * @return \GithubService\Operation\compareTwoCommitsPaginate The new operation
     */
    public function compareTwoCommitsPaginate($authorization, $pageURL) {
        $instance = new compareTwoCommitsPaginate($this, $authorization, $this->getUserAgent(), $pageURL);
        return $instance;
    }

    /**
     * compareTwoCommitsForksPaginate
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $pageURL 
     * @return \GithubService\Operation\compareTwoCommitsForksPaginate The new
     * operation
     */
    public function compareTwoCommitsForksPaginate($authorization, $pageURL) {
        $instance = new compareTwoCommitsForksPaginate($this, $authorization, $this->getUserAgent(), $pageURL);
        return $instance;
    }

    /**
     * listSelfReposPaginate
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $pageURL 
     * @return \GithubService\Operation\listSelfReposPaginate The new operation
     */
    public function listSelfReposPaginate($authorization, $pageURL) {
        $instance = new listSelfReposPaginate($this, $authorization, $this->getUserAgent(), $pageURL);
        return $instance;
    }

    /**
     * listUserReposPaginate
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $pageURL 
     * @return \GithubService\Operation\listUserReposPaginate The new operation
     */
    public function listUserReposPaginate($authorization, $pageURL) {
        $instance = new listUserReposPaginate($this, $authorization, $this->getUserAgent(), $pageURL);
        return $instance;
    }

    /**
     * listOrgReposPaginate
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $pageURL 
     * @return \GithubService\Operation\listOrgReposPaginate The new operation
     */
    public function listOrgReposPaginate($authorization, $pageURL) {
        $instance = new listOrgReposPaginate($this, $authorization, $this->getUserAgent(), $pageURL);
        return $instance;
    }

    /**
     * listPublicReposPaginate
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $pageURL 
     * @return \GithubService\Operation\listPublicReposPaginate The new operation
     */
    public function listPublicReposPaginate($authorization, $pageURL) {
        $instance = new listPublicReposPaginate($this, $authorization, $this->getUserAgent(), $pageURL);
        return $instance;
    }

    /**
     * getRepoPaginate
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $pageURL 
     * @return \GithubService\Operation\getRepoPaginate The new operation
     */
    public function getRepoPaginate($authorization, $pageURL) {
        $instance = new getRepoPaginate($this, $authorization, $this->getUserAgent(), $pageURL);
        return $instance;
    }

    /**
     * listRepoContributorsPaginate
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $pageURL 
     * @return \GithubService\Operation\listRepoContributorsPaginate The new operation
     */
    public function listRepoContributorsPaginate($authorization, $pageURL) {
        $instance = new listRepoContributorsPaginate($this, $authorization, $this->getUserAgent(), $pageURL);
        return $instance;
    }

    /**
     * listRepoLanguagesPaginate
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $pageURL 
     * @return \GithubService\Operation\listRepoLanguagesPaginate The new operation
     */
    public function listRepoLanguagesPaginate($authorization, $pageURL) {
        $instance = new listRepoLanguagesPaginate($this, $authorization, $this->getUserAgent(), $pageURL);
        return $instance;
    }

    /**
     * listRepoTeamsPaginate
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $pageURL 
     * @return \GithubService\Operation\listRepoTeamsPaginate The new operation
     */
    public function listRepoTeamsPaginate($authorization, $pageURL) {
        $instance = new listRepoTeamsPaginate($this, $authorization, $this->getUserAgent(), $pageURL);
        return $instance;
    }

    /**
     * listRepoTagsPaginate
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $pageURL 
     * @return \GithubService\Operation\listRepoTagsPaginate The new operation
     */
    public function listRepoTagsPaginate($authorization, $pageURL) {
        $instance = new listRepoTagsPaginate($this, $authorization, $this->getUserAgent(), $pageURL);
        return $instance;
    }

    /**
     * listRepoBranchesPaginate
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $pageURL 
     * @return \GithubService\Operation\listRepoBranchesPaginate The new operation
     */
    public function listRepoBranchesPaginate($authorization, $pageURL) {
        $instance = new listRepoBranchesPaginate($this, $authorization, $this->getUserAgent(), $pageURL);
        return $instance;
    }

    /**
     * getRepoBranchPaginate
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $pageURL 
     * @return \GithubService\Operation\getRepoBranchPaginate The new operation
     */
    public function getRepoBranchPaginate($authorization, $pageURL) {
        $instance = new getRepoBranchPaginate($this, $authorization, $this->getUserAgent(), $pageURL);
        return $instance;
    }

    /**
     * searchReposPaginate
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $pageURL 
     * @return \GithubService\Operation\searchReposPaginate The new operation
     */
    public function searchReposPaginate($authorization, $pageURL) {
        $instance = new searchReposPaginate($this, $authorization, $this->getUserAgent(), $pageURL);
        return $instance;
    }

    /**
     * listUserEmailsPaginate
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $pageURL 
     * @return \GithubService\Operation\listUserEmailsPaginate The new operation
     */
    public function listUserEmailsPaginate($authorization, $pageURL) {
        $instance = new listUserEmailsPaginate($this, $authorization, $this->getUserAgent(), $pageURL);
        return $instance;
    }

    /**
     * getUserPaginate
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $pageURL 
     * @return \GithubService\Operation\getUserPaginate The new operation
     */
    public function getUserPaginate($authorization, $pageURL) {
        $instance = new getUserPaginate($this, $authorization, $this->getUserAgent(), $pageURL);
        return $instance;
    }

    /**
     * getSelfUserPaginate
     *
     * @param GithubService\AuthToken $Authorization The token to use for the request.
     * This should either be an a complete token in the format appropriate format e.g.
     * 'token 123567890' for an oauth token, or '"Basic
     * ".base64_encode($username.":".$password)"' for a Basic token or anything that
     * can be cast to a string in the correct format e.g. an 
     * \ArtaxServiceBuilder\BasicAuthToken object.
     * @param mixed $pageURL 
     * @return \GithubService\Operation\getSelfUserPaginate The new operation
     */
    public function getSelfUserPaginate($authorization, $pageURL) {
        $instance = new getSelfUserPaginate($this, $authorization, $this->getUserAgent(), $pageURL);
        return $instance;
    }

    /**
     * @return
     */
    public function getUserAgent() {
        return $this->userAgent;
    }

    public function setUserAgent($value) {
        $this->userAgent = $value;
    }

    /**
     * execute
     *
     * Sends a request to the API synchronously
     *
     * @param $request \Amp\Artax\Request The request to send.
     * @param $operation \ArtaxServiceBuilder\Operation The response that is called the
     * execute.
     * @return \Amp\Artax\Response The response from Artax
     */
    public function execute(\Amp\Artax\Request $request, \ArtaxServiceBuilder\Operation $operation) {
        $originalRequest = clone $request;
        $cachingHeaders = $this->responseCache->getCachingHeaders($request);
        $request->setAllHeaders($cachingHeaders);
        $promise = $this->client->request($request);
        $response = \Amp\wait($promise, $this->reactor);

        if ($response) {
            $operation->setResponse($response);
            $operation->setOriginalResponse($response);
        }

        if ($operation->shouldResponseBeCached($response)) {
            $this->responseCache->storeResponse($originalRequest, $response);
        }

        if ($operation->shouldUseCachedResponse($response)) {
            $cachedResponse = $this->responseCache->getResponse($originalRequest);
            if ($cachedResponse) {
                $response = $cachedResponse;
                $operation->setResponse($response);
            }
            //@TODO This code should only be reached if the cache entry was deleted
            //so throw an exception? Or just leave the 304 to error?
        }

        $exception = $operation->translateResponseToException($response);

        if ($exception) {
            throw $exception;
        }

        return $response;
    }

    /**
     * executeAsync
     *
     * Execute an operation asynchronously.
     *
     * @param \ArtaxServiceBuilder\Operation $operation The operation to perform
     * @param callable $callback The callback to call on completion/response. The
     * signature of the method should be:
     * function(
     *     \Exception $error = null, // null if no error 
     *     $parsedData = null, //The parsed operation data i.e. same type as
     * responseClass of the operation.
     *     \Amp\Artax\Response $response = null //The response received or null if the
     * request completely failed.
     * )
     * @return \Amp\Promise A promise to resolve the call at some time.
     */
    public function executeAsync(\Amp\Artax\Request $request, \ArtaxServiceBuilder\Operation $operation, callable $callback) {
        $originalRequest = clone $request;
        $cachingHeaders = $this->responseCache->getCachingHeaders($request);
        $request->setAllHeaders($cachingHeaders);
        $promise = $this->client->request($request);
        $promise->when(function(\Exception $error = null, Response $response = null) use ($originalRequest, $callback, $operation) {

            if ($response) {
                $operation->setResponse($response);
                $operation->setOriginalResponse($response);
            }

            if($error) {
                $callback($error, null, null);
                return;
            }

            if ($operation->shouldResponseBeCached($response)) {
                $this->responseCache->storeResponse($originalRequest, $response);
            }

            if ($operation->shouldUseCachedResponse($response)) {
                $cachedResponse = $this->responseCache->getResponse($originalRequest);
                if ($cachedResponse) {
                    $response = $cachedResponse;
                    $operation->setResponse($response);
                }
            }

            $responseException = $operation->translateResponseToException($response);
            if ($responseException) {
                $callback($responseException, null, $response);
                return;
            }

            if ($operation->shouldResponseBeProcessed($response)) {
                try {
                    $parsedResponse = $operation->processResponse($response);
                    $callback(null, $parsedResponse, $response);
                }
                catch(\Exception $e) {
                    $exception = new ProcessResponseException("Exception parsing response: ".$e->getMessage(), 0, $e);
                    $callback($exception, null, $response);
                }
            }
            else {
                $callback(null, null, $response);
            }
        });

        return $promise;
    }

    /**
     * Determine whether the response should be processed.
     *
     * @return boolean
     */
    public function shouldResponseBeProcessed(\Amp\Artax\Response $response) {
        return true;
    }

    /**
     * Determine whether the response should be cached.
     *
     * @return boolean
     */
    public function shouldResponseBeCached(\Amp\Artax\Response $response) {
        $status = $response->getStatus();
        if ($status == 200) {
            return true;
        }

        return false;
    }

    /**
     * Determine whether the cached response should be used.
     *
     * @return boolean
     */
    public function shouldUseCachedResponse(\Amp\Artax\Response $response) {
        $status = $response->getStatus();
        if ($status == 304) {
            return true;
        }

        return false;
    }

    abstract public function instantiateResult(\Amp\Artax\Response $response, \ArtaxServiceBuilder\Operation $operation);
    /**
     * Inspect the response and return an exception if it is an error response.
     *      * Exceptions should extend \ArtaxServiceBuilder\BadResponseException
     *
     * @return BadResponseException
     */
    public function translateResponseToException(\Amp\Artax\Response $response) {
        $status = $response->getStatus();
        if ($status < 200 || $status >= 300) {
            return new BadResponseException(
                "Status $status is not treated as OK.",
                $response
            );
        }

        return null;
    }


}
