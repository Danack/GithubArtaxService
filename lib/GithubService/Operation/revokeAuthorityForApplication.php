<?php

//Auto-generated by ArtaxServiceBuilder - https://github.com/Danack/ArtaxServiceBuilder
//
//Do not be surprised when any changes to this file are over-written.
//
namespace GithubService\Operation;

class revokeAuthorityForApplication implements \ArtaxServiceBuilder\Operation {

    /**
     * @var \GithubService\GithubArtaxService\GithubArtaxService
     */
    public $api = null;

    /**
     * @var array
     */
    public $parameters = null;

    /**
     * @var \Amp\Artax\Response
     */
    public $response = null;

    /**
     * @var \Amp\Artax\Response
     */
    public $originalResponse = null;

    /**
     * Get the last response.
     *
     * @return \Amp\Artax\Response
     */
    public function getResponse() {
        return $this->response;
    }

    /**
     * Set the last response. This should only be used by the API class when the
     * operation has been dispatched. Storing the response is required as some APIs
     * store out-of-bound information in the headers e.g. rate-limit info, pagination
     * that is not really part of the operation.
     */
    public function setResponse(\Amp\Artax\Response $response) {
        $this->response = $response;
    }

    public function __construct(\GithubService\GithubArtaxService\GithubArtaxService $api, $userAgent, $authorization, $client_id, $access_token) {
        $defaultParams = [
            'Accept' => 'application/vnd.github.mirage-preview+json',
        ];
        $this->setParams($defaultParams);
        $this->api = $api;
        $this->parameters['userAgent'] = $userAgent;
        $this->parameters['Authorization'] = $authorization;
        $this->parameters['client_id'] = $client_id;
        $this->parameters['access_token'] = $access_token;
    }

    public function setAPI(\GithubService\GithubArtaxService\GithubArtaxService $api) {
        $this->api = $api;
    }

    public function setParams(array $params) {
        if (array_key_exists('Accept', $params)) {
            $this->parameters['Accept'] = $params['Accept'];
        }
        if (array_key_exists('userAgent', $params)) {
            $this->parameters['userAgent'] = $params['userAgent'];
        }
        if (array_key_exists('Authorization', $params)) {
            $this->parameters['Authorization'] = $params['Authorization'];
        }
        if (array_key_exists('otp', $params)) {
            $this->parameters['otp'] = $params['otp'];
        }
        if (array_key_exists('client_id', $params)) {
            $this->parameters['client_id'] = $params['client_id'];
        }
        if (array_key_exists('access_token', $params)) {
            $this->parameters['access_token'] = $params['access_token'];
        }
    }

    /**
     * Set Accept
     *
     * @return $this
     */
    public function setAccept($Accept) {
        $this->parameters['Accept'] = $Accept;

        return $this;
    }

    /**
     * Set userAgent
     *
     * The user-agent which allows Github to recognise your application.
     *
     * @return $this
     */
    public function setUserAgent($userAgent) {
        $this->parameters['userAgent'] = $userAgent;

        return $this;
    }

    /**
     * Set Authorization
     *
     * The basic authentication token
     *
     * @return $this
     */
    public function setAuthorization($Authorization) {
        $this->parameters['Authorization'] = $Authorization;

        return $this;
    }

    /**
     * Set otp
     *
     * The one time password.
     *
     * @return $this
     */
    public function setOtp($otp) {
        $this->parameters['otp'] = $otp;

        return $this;
    }

    /**
     * Set client_id
     *
     * The id of the client.
     *
     * @return $this
     */
    public function setClient_id($client_id) {
        $this->parameters['client_id'] = $client_id;

        return $this;
    }

    /**
     * Set access_token
     *
     * The access token to delete.
     *
     * @return $this
     */
    public function setAccess_token($access_token) {
        $this->parameters['access_token'] = $access_token;

        return $this;
    }

    public function getParameters() {
        return $this->parameters;
    }

    /**
     * Apply any filters necessary to the parameter
     *
     * @return mixed
     * @param string $name The name of the parameter to get.
     */
    public function getFilteredParameter($name) {
        if (array_key_exists($name, $this->parameters) == false) {
            throw new \Exception('Parameter '.$name.' does not exist.');
        }

        $value = $this->parameters[$name];


        return $value;
    }

    /**
     * Create an Amp\Artax\Request object from the operation.
     *
     * @return \Amp\Artax\Request
     */
    public function createRequest() {
        $request = new \Amp\Artax\Request();
        $url = null;
        $request->setMethod('');


        if (array_key_exists('Accept', $this->parameters) == true) {
        $value = $this->getFilteredParameter('Accept');
            $request->setHeader('Accept', $value);
        }
        $value = $this->getFilteredParameter('userAgent');
        $request->setHeader('User-Agent', $value);
        $value = $this->getFilteredParameter('Authorization');
        $request->setHeader('Authorization', $value);
        if (array_key_exists('otp', $this->parameters) == true) {
        $value = $this->getFilteredParameter('otp');
            $request->setHeader('X-GitHub-OTP', $value);
        }
        $value = $this->getFilteredParameter('client_id');
        $queryParameters['client_id'] = $value;
        $value = $this->getFilteredParameter('access_token');
        $queryParameters['access_token'] = $value;

        //Parameters are parsed and set, lets prepare the request
        if ($url == null) {
            $url = "https://api.github.com/applications/{client_id}/tokens/{access_token}";
        }
        $uriTemplate = new \ArtaxServiceBuilder\Service\UriTemplate\UriTemplate();
        $url = $uriTemplate->expand($url, $this->parameters);
        $request->setUri($url);

        return $request;
    }

    /**
     * Create and execute the operation, returning the raw response from the server.
     *
     * @return \Amp\Artax\Response
     */
    public function createAndExecute() {
        $request = $this->createRequest();
        $response = $this->api->execute($request, $this);
        $this->response = $response;

        return $response;
    }

    /**
     * Create and execute the operation, then return the processed  response.
     *
     * @return mixed|\
     */
    public function call() {
        $request = $this->createRequest();
        $response = $this->api->execute($request, $this);
        $this->response = $response;

        if ($this->shouldResponseBeProcessed($response)) {
            $instance = $this->api->instantiateResult($response, $this);

            return $instance;
        }
        return $response;
    }

    /**
     * Execute the operation, returning the parsed response
     *
     * @return mixed
     */
    public function execute() {
        $request = $this->createRequest();
        return $this->dispatch($request);
    }

    /**
     * Execute the operation asynchronously, passing the parsed response to the
     * callback
     *
     * @return \Amp\Promise
     */
    public function executeAsync(callable $callable) {
        $request = $this->createRequest();
        return $this->dispatchAsync($request, $callable);
    }

    /**
     * Dispatch the request for this operation and process the response. Allows you to
     * modify the request before it is sent.
     *
     * @return mixed
     * @param \Amp\Artax\Request $request The request to be processed
     */
    public function dispatch(\Amp\Artax\Request $request) {
        $response = $this->api->execute($request, $this);
        $this->response = $response;
        $instance = $this->api->instantiateResult($response, $this);

        return $instance;
    }

    /**
     * Dispatch the request for this operation and process the response asynchronously.
     * Allows you to modify the request before it is sent.
     *
     * @return mixed
     * @param \Amp\Artax\Request $request The request to be processed
     * @param callable $callable The callable that processes the response
     */
    public function dispatchAsync(\Amp\Artax\Request $request, callable $callable) {
        return $this->api->executeAsync($request, $this, $callable);
    }

    /**
     * Dispatch the request for this operation and process the response. Allows you to
     * modify the request before it is sent.
     *
     * @return mixed
     * @param \Amp\Artax\Response $response The HTTP response.
     */
    public function processResponse(\Amp\Artax\Response $response) {
        $instance = $this->api->instantiateResult($response, $this);

        return $instance;
    }

    /**
     * Determine whether the response should be processed. Override this method to have
     * a per-operation decision, otherwise the function is the API class will be used.
     *
     * @return mixed
     */
    public function shouldResponseBeProcessed(\Amp\Artax\Response $response) {
        return $this->api->shouldResponseBeProcessed($response);
    }

    /**
     * Determine whether the response is an error. Override this method to have a
     * per-operation decision, otherwise the function from the API class will be used.
     *
     * @return null|\ArtaxServiceBuilder\BadResponseException
     */
    public function translateResponseToException(\Amp\Artax\Response $response) {
        return $this->api->translateResponseToException($response);
    }

    /**
     * Determine whether the response indicates that we should use a cached response.
     * Override this method to have a per-operation decision, otherwise the
     * functionfrom the API class will be used.
     *
     * @return mixed
     */
    public function shouldUseCachedResponse(\Amp\Artax\Response $response) {
        return $this->api->shouldUseCachedResponse($response);
    }

    /**
     * Determine whether the response should be cached. Override this method to have a
     * per-operation decision, otherwise the function from the API class will be used.
     *
     * @return mixed
     */
    public function shouldResponseBeCached(\Amp\Artax\Response $response) {
        return $this->api->shouldResponseBeCached($response);
    }

    /**
     * Set the original response. This may be different from the cached response if one
     * is used.
     */
    public function setOriginalResponse(\Amp\Artax\Response $response) {
        $this->originalResponse = $response;
    }

    /**
     * Get the original response. This may be different from the cached response if one
     * is used.
     *
     * @return \Amp\Artax\Response
     */
    public function getOriginalResponse() {
        return $this->originalResponse;
    }

    /**
     * Return how the result of this operation should be instantiated.
     *
     * @return \Amp\Artax\Response
     */
    public function getResultInstantiationInfo() {
        return null;
    }


}
