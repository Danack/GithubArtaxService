<?php

//Auto-generated by ArtaxServiceBuilder - https://github.com/Danack/ArtaxServiceBuilder
//
//Do not be surprised if any changes to this file are over-written.
//
namespace GithubService;

interface GithubService
{

    /**
     * executeAsync
     *
     * Execute an operation asynchronously.
     *
     * @param \ArtaxServiceBuilder\Operation $operation The operation to perform
     * @param callable $callback The callback to call on completion/response.
     * Parameters should be blah blah blah
     */
    public function executeAsync(\ArtaxServiceBuilder\Operation $operation, callable $callback);

    /**
     * getAuthorizations
     *
     * @param Authorization mixed The stupid oauth2 bearer token
     * @return \GithubService\Operation\getAuthorizations The new operation
     */
    public function getAuthorizations($Authorization);

    /**
     * accessToken
     *
     * @param client_id mixed string Required. The client ID you received from GitHub
     * when you registered.
     * @param client_secret mixed string Required. The client secret you received from
     * GitHub when you registered.
     * @param code mixed string Required. The code you received as a response to Step
     * 1.
     * @param redirect_uri mixed string The URL in your app where users will be sent
     * after authorization. See details below about redirect urls.
     * @return \GithubService\Operation\accessToken The new operation
     */
    public function accessToken($client_id, $client_secret, $code, $redirect_uri);

    /**
     * revokeAllAuthority
     *
     * @param Authorization mixed The stupid oauth2 bearer token
     * @param client_id mixed The id of the client.
     * @return \GithubService\Operation\revokeAllAuthority The new operation
     */
    public function revokeAllAuthority($Authorization, $client_id);

    /**
     * getUserEmails
     *
     * Get users email addresses
     *
     * @param Authorization mixed The stupid oauth2 bearer token
     * @return \GithubService\Operation\getUserEmails The new operation
     */
    public function getUserEmails($Authorization);

    /**
     * addUserEmails
     *
     * Get users email addresses
     *
     * @param Authorization mixed The stupid oauth2 bearer token
     * @param emails mixed Array of the emails to add
     * @return \GithubService\Operation\addUserEmails The new operation
     */
    public function addUserEmails($Authorization, $emails);

    /**
     * listUserRepos
     *
     * List repositories for the authenticated user. Note that this does not include
     * repositories owned by organizations which the user can access. You can list user
     * organizations and list organization repositories separately.
     *
     * @param Authorization mixed The stupid oauth2 bearer token
     * @return \GithubService\Operation\listUserRepos The new operation
     */
    public function listUserRepos($Authorization);

    /**
     * getUserInfoByName
     *
     * @param Authorization mixed The stupid oauth2 bearer token
     * @param owner mixed The owner of the repo to fetch contributors for.
     * @param repo mixed The repo to fetch contributors for.
     * @param anon mixed Set to 1 or true to include anonymous contributors in results.
     * @return \GithubService\Operation\getUserInfoByName The new operation
     */
    public function getUserInfoByName($Authorization, $owner, $repo, $anon);

    /**
     * getUserInfo
     *
     * @param Authorization mixed The stupid oauth2 bearer token
     * @return \GithubService\Operation\getUserInfo The new operation
     */
    public function getUserInfo($Authorization);

    /**
     * listRepoCommitsPaginate
     *
     * @param Authorization mixed The stupid oauth2 bearer token
     * @param pageURL mixed 
     * @return \GithubService\Operation\listRepoCommitsPaginate The new operation
     */
    public function listRepoCommitsPaginate($Authorization, $pageURL);

    /**
     * listRepoCommits
     *
     * @param Authorization mixed The stupid oauth2 bearer token
     * @param owner mixed 
     * @param repo mixed 
     * @return \GithubService\Operation\listRepoCommits The new operation
     */
    public function listRepoCommits($Authorization, $owner, $repo);

    /**
     * getSingleCommit
     *
     * @param Authorization mixed The stupid oauth2 bearer token
     * @param owner mixed 
     * @param repo mixed 
     * @param sha mixed SHA of the commit to get
     * @return \GithubService\Operation\getSingleCommit The new operation
     */
    public function getSingleCommit($Authorization, $owner, $repo, $sha);

    /**
     * listRepositories
     *
     * @param Authorization mixed The stupid oauth2 bearer token
     * @param type mixed Can be one of all, owner, public, private, member. Default:
     * all
     * @param sort mixed Can be one of created, updated, pushed, full_name. Default:
     * full_name
     * @param direction mixed Can be one of asc or desc. Default: when using full_name:
     * asc; otherwise desc
     * @return \GithubService\Operation\listRepositories The new operation
     */
    public function listRepositories($Authorization, $type, $sort, $direction);

    /**
     * listUserRepositories
     *
     * @param Authorization mixed The stupid oauth2 bearer token
     * @param username mixed The user to fetch the repos for.
     * @param type mixed Can be one of all, owner, member. Default: owner
     * @param sort mixed Can be one of created, updated, pushed, full_name. Default:
     * full_name
     * @param direction mixed Can be one of asc or desc. Default: when using full_name:
     * asc, otherwise desc
     * @return \GithubService\Operation\listUserRepositories The new operation
     */
    public function listUserRepositories($Authorization, $username, $type, $sort, $direction);

    /**
     * listOrganizationRepositories
     *
     * @param Authorization mixed The stupid oauth2 bearer token
     * @param organisation mixed The organisation to fetch the repos for.
     * @param type mixed Can be one of all, owner, member. Default: owner
     * @return \GithubService\Operation\listOrganizationRepositories The new operation
     */
    public function listOrganizationRepositories($Authorization, $organisation, $type);

    /**
     * listAllPublicRepositories
     *
     * @param Authorization mixed The stupid oauth2 bearer token
     * @param since mixed The integer ID of the last Repository that you’ve seen.
     * @return \GithubService\Operation\listAllPublicRepositories The new operation
     */
    public function listAllPublicRepositories($Authorization, $since);

    /**
     * getRepo
     *
     * @param Authorization mixed The stupid oauth2 bearer token
     * @param username mixed The user to fetch the repos for.
     * @param type mixed Can be one of all, owner, member. Default: owner
     * @param sort mixed Can be one of created, updated, pushed, full_name. Default:
     * full_name
     * @param direction mixed Can be one of asc or desc. Default: when using full_name:
     * asc, otherwise desc
     * @return \GithubService\Operation\getRepo The new operation
     */
    public function getRepo($Authorization, $username, $type, $sort, $direction);

    /**
     * listRepoLanguages
     *
     * @param Authorization mixed The stupid oauth2 bearer token
     * @param owner mixed The owner of the repo to fetch contributors for.
     * @param repo mixed The repo to fetch contributors for.
     * @return \GithubService\Operation\listRepoLanguages The new operation
     */
    public function listRepoLanguages($Authorization, $owner, $repo);

    /**
     * listRepoTeams
     *
     * @param Authorization mixed The stupid oauth2 bearer token
     * @param owner mixed The owner of the repo to fetch contributors for.
     * @param repo mixed The repo to fetch contributors for.
     * @return \GithubService\Operation\listRepoTeams The new operation
     */
    public function listRepoTeams($Authorization, $owner, $repo);

    /**
     * listRepoTagsPaginate
     *
     * @param Authorization mixed The stupid oauth2 bearer token
     * @param pageURL mixed 
     * @return \GithubService\Operation\listRepoTagsPaginate The new operation
     */
    public function listRepoTagsPaginate($Authorization, $pageURL);

    /**
     * listRepoTags
     *
     * List tags for a repository. Response can be paged. This can be used either as a
     * authed request (for private repos and higher rate limiting), or as unsigned,
     * (public only, lower limit).
     *
     * @param Authorization mixed The stupid oauth2 bearer token
     * @param owner mixed 
     * @param repo mixed 
     * @return \GithubService\Operation\listRepoTags The new operation
     */
    public function listRepoTags($Authorization, $owner, $repo);

    /**
     * listRepoBranches
     *
     * @param Authorization mixed The stupid oauth2 bearer token
     * @param owner mixed 
     * @param repo mixed 
     * @return \GithubService\Operation\listRepoBranches The new operation
     */
    public function listRepoBranches($Authorization, $owner, $repo);

    /**
     * getRepoBranch
     *
     * @param Authorization mixed The stupid oauth2 bearer token
     * @param owner mixed 
     * @param repo mixed 
     * @param branch mixed 
     * @return \GithubService\Operation\getRepoBranch The new operation
     */
    public function getRepoBranch($Authorization, $owner, $repo, $branch);

    /**
     * deleteRepo
     *
     * @param Authorization mixed The stupid oauth2 bearer token
     * @param owner mixed 
     * @param repo mixed 
     * @return \GithubService\Operation\deleteRepo The new operation
     */
    public function deleteRepo($Authorization, $owner, $repo);


}
